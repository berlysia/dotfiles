{{ if eq .chezmoi.os "windows" -}}
# Install mise and packages on Windows

$ErrorActionPreference = "Stop"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

# Check if mise is installed
try {
    $null = & mise --version 2>$null
    Write-Log "mise already installed"
} catch {
    Write-Log "Installing mise..."
    
    # Download and install mise for Windows
    $miseUrl = "https://github.com/jdx/mise/releases/latest/download/mise-v*-win64.zip"
    $tempDir = [System.IO.Path]::GetTempPath()
    $zipFile = Join-Path $tempDir "mise.zip"
    $extractDir = Join-Path $tempDir "mise"
    
    try {
        # Get latest release URL
        $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/jdx/mise/releases/latest"
        $downloadUrl = $releases.assets | Where-Object { $_.name -like "*win64.zip" } | Select-Object -ExpandProperty browser_download_url
        
        if (-not $downloadUrl) {
            throw "Could not find Windows release"
        }
        
        Write-Log "Downloading mise from $downloadUrl"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $zipFile
        
        # Extract
        Expand-Archive -Path $zipFile -DestinationPath $extractDir -Force
        
        # Find mise.exe and copy to a location in PATH
        $miseExe = Get-ChildItem -Path $extractDir -Name "mise.exe" -Recurse | Select-Object -First 1
        if ($miseExe) {
            $installDir = "$env:USERPROFILE\.local\bin"
            if (!(Test-Path $installDir)) {
                New-Item -ItemType Directory -Path $installDir -Force | Out-Null
            }
            
            Copy-Item -Path $miseExe.FullName -Destination "$installDir\mise.exe" -Force
            
            # Add to PATH if not already there
            $userPath = [Environment]::GetEnvironmentVariable("PATH", "User")
            if ($userPath -notlike "*$installDir*") {
                $newPath = "$userPath;$installDir"
                [Environment]::SetEnvironmentVariable("PATH", $newPath, "User")
                $env:PATH = "$env:PATH;$installDir"
            }
            
            Write-Log "mise installed successfully to $installDir"
        } else {
            throw "Could not find mise.exe in downloaded archive"
        }
        
    } catch {
        Write-Log "Failed to install mise: $($_.Exception.Message)" "ERROR"
        exit 1
    } finally {
        # Cleanup
        Remove-Item $zipFile -ErrorAction SilentlyContinue
        Remove-Item $extractDir -Recurse -ErrorAction SilentlyContinue
    }
}

# Install mise packages
$packages = @(
{{- range $index, $package := .packages.mise }}
    "{{ $package }}"{{ if ne $index (sub (len $.packages.mise) 1) }},{{ end }}
{{- end }}
)

foreach ($package in $packages) {
    Write-Log "Processing package: $package"
    
    try {
        # Get latest version
        $version = & mise latest $package 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Log "Could not get latest version for $package" "WARNING"
            continue
        }
        
        # Check if already installed
        $installed = & mise ls $package 2>$null
        if ($LASTEXITCODE -eq 0 -and $installed -match $version) {
            Write-Log "${package}@${version} already installed"
            # Ensure it's set as global even if already installed
            & mise use --global "${package}@${version}"
        } else {
            # Install package
            Write-Log "Installing ${package}@${version}..."
            & mise install $package $version
            if ($LASTEXITCODE -eq 0) {
                # Set as global version
                & mise use --global "${package}@${version}"
                if ($LASTEXITCODE -eq 0) {
                    Write-Log "Successfully installed and activated ${package}@${version}" "SUCCESS"
                } else {
                    Write-Log "Installed ${package}@${version} but failed to set as global" "WARNING"
                }
            } else {
                Write-Log "Failed to install ${package}@${version}" "ERROR"
                continue
            }
        }
    } catch {
        Write-Log "Error processing $package`: $($_.Exception.Message)" "ERROR"
    }
}

Write-Log "mise package installation completed"

# Setup environment in current session for immediate use
Write-Log "Setting up environment in current session..."

# Add user local bin to PATH if not already present
$localBin = "$env:USERPROFILE\.local\bin"
if (Test-Path $localBin) {
    $currentPath = $env:PATH
    if ($currentPath -notlike "*$localBin*") {
        $env:PATH = "$localBin;$currentPath"
        Write-Log "Added $localBin to PATH"
    }
}

# Initialize mise environment
try {
    $miseEnv = & mise env --shell powershell 2>$null
    if ($LASTEXITCODE -eq 0 -and $miseEnv) {
        Invoke-Expression $miseEnv
        Write-Log "Initialized mise environment for current session"
    }
} catch {
    Write-Log "Failed to initialize mise environment" "WARNING"
}

# Set up Go environment variables
if (Get-Command go -ErrorAction SilentlyContinue) {
    if (-not $env:GOPATH) {
        $env:GOPATH = "$env:USERPROFILE\go"
        Write-Log "Set GOPATH to $env:GOPATH"
    }
    $goBin = "$env:GOPATH\bin"
    if ((Test-Path $goBin) -and ($env:PATH -notlike "*$goBin*")) {
        $env:PATH = "$goBin;$env:PATH"
        Write-Log "Added $goBin to PATH"
    }
}

# Set up Rust environment
$cargoEnv = "$env:USERPROFILE\.cargo\env.ps1"
if (Test-Path $cargoEnv) {
    & $cargoEnv
    Write-Log "Loaded Rust/Cargo environment"
}

Write-Log "Environment setup completed - tools are now available in current session"
{{ end -}}