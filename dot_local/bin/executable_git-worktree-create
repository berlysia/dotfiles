#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if branch name is provided
if [[ $# -eq 0 ]]; then
    echo -e "${RED}Usage: git-worktree-create <branch-name>${NC}"
    exit 1
fi

branch_name="$1"

# Get repository root
repo_root=$(git rev-parse --show-toplevel)
worktrees_dir="$repo_root/.worktrees"

# Create .worktrees directory if it doesn't exist
if [[ ! -d "$worktrees_dir" ]]; then
    echo -e "${BLUE}üìÅ Creating .worktrees directory...${NC}"
    mkdir -p "$worktrees_dir"
fi

# Set worktree path
worktree_path="$worktrees_dir/$branch_name"

# Check if worktree already exists
if [[ -d "$worktree_path" ]]; then
    echo -e "${RED}‚úó Worktree already exists: $worktree_path${NC}"
    exit 1
fi

# Check if branch exists locally
if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    echo -e "${GREEN}‚úì Branch '$branch_name' exists locally${NC}"
    git worktree add "$worktree_path" "$branch_name"
elif git show-ref --verify --quiet "refs/remotes/origin/$branch_name"; then
    # Branch exists on remote but not locally
    echo -e "${YELLOW}‚ö†Ô∏è  Branch '$branch_name' exists on remote, creating local tracking branch${NC}"
    git worktree add "$worktree_path" -b "$branch_name" "origin/$branch_name"
else
    # Branch doesn't exist, create new branch from current
    current_branch=$(git branch --show-current)
    echo -e "${BLUE}üìù Creating new branch '$branch_name' from '$current_branch'${NC}"
    git worktree add "$worktree_path" -b "$branch_name"
fi

echo -e "${GREEN}‚úì Worktree created: $worktree_path${NC}"
echo -e "${BLUE}üí° To switch to this worktree: cd $worktree_path${NC}"