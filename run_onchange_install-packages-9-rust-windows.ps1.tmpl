{{ if eq .chezmoi.os "windows" -}}
# Rust tools installation on Windows

$ErrorActionPreference = "Stop"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

# Activate mise environment to make Rust available
if (Get-Command mise -ErrorAction SilentlyContinue) {
    try {
        # Use the correct PowerShell activation method
        (& mise activate pwsh) | Out-String | Invoke-Expression
        Write-Log "Activated mise environment"
    } catch {
        Write-Log "Failed to activate mise environment: $($_.Exception.Message)" "WARNING"
    }
}

# Check if Cargo is installed
try {
    $null = & cargo --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Cargo command failed"
    }
} catch {
    Write-Log "Cargo not found. Please install Rust first (available via mise or rustup)." "ERROR"
    exit 1
}

# Install Rust crates
$crates = @(
{{- range $index, $crate := .packages.cargo }}
    "{{ $crate }}"{{ if ne $index (sub (len $.packages.cargo) 1) }},{{ end }}
{{- end }}
)

foreach ($crate in $crates) {
    # Check if crate is already installed
    try {
        $null = & $crate --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "$crate already installed"
            continue
        }
    } catch {
        # Crate not found, proceed with installation
    }
    
    Write-Log "Installing $crate..."
    try {
        & cargo install $crate
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Successfully installed $crate" "SUCCESS"
        } else {
            Write-Log "Failed to install $crate" "ERROR"
        }
    } catch {
        Write-Log "Error installing $crate`: $($_.Exception.Message)" "ERROR"
    }
}

Write-Log "Rust tools installation completed"
{{ end -}}