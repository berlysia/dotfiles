{{ if eq .chezmoi.os "windows" }}

# winget package list from packages.yaml
$wingetPackages = @(
{{- range $index, $package := .packages.windows.winget }}
    "{{ $package }}"{{ if ne $index (sub (len $.packages.windows.winget) 1) }},{{ end }}
{{- end }}
)

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

function Test-WingetAvailable {
    try {
        $null = Get-Command winget -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

function Install-WingetPackage {
    param([string]$PackageId, [hashtable]$InstalledPackages)
    
    Write-Log "Installing $PackageId..."
    
    try {
        # Check if package is already installed using cached list
        if ($InstalledPackages.ContainsKey($PackageId)) {
            Write-Log "$PackageId is already installed (cached)" "INFO"
            return $true
        }
        
        # Fallback: Double-check with individual winget list command
        Write-Log "Verifying installation status for $PackageId..." "DEBUG"
        $individualCheck = winget list --id $PackageId --exact --accept-source-agreements 2>$null
        if ($LASTEXITCODE -eq 0 -and $individualCheck -match $PackageId) {
            Write-Log "$PackageId is already installed (verified)" "INFO"
            $InstalledPackages[$PackageId] = $true
            return $true
        }
        
        # Install package with appropriate flags
        Write-Log "Proceeding with installation of $PackageId"
        if ($isAdmin) {
            winget install --id $PackageId --exact --silent --accept-source-agreements --accept-package-agreements --scope machine
        } else {
            winget install --id $PackageId --exact --silent --accept-source-agreements --accept-package-agreements --scope user
        }
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Successfully installed $PackageId" "SUCCESS"
            $InstalledPackages[$PackageId] = $true
            return $true
        } else {
            Write-Log "Failed to install $PackageId (exit code: $LASTEXITCODE)" "ERROR"
            return $false
        }
    } catch {
        Write-Log "Error installing $PackageId`: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Check if running as administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")

# Main installation process
Write-Log "Starting winget package installation..."
if ($isAdmin) {
    Write-Log "Running with administrator privileges - installing system-wide"
} else {
    Write-Log "Running without administrator privileges - installing to user profile"
    Write-Log "Note: Some packages may require administrator privileges and will be skipped"
}

if (-Not (Test-WingetAvailable)) {
    Write-Log "winget is not available. Please install App Installer from Microsoft Store or update Windows." "ERROR"
    exit 1
}

# Update winget sources
Write-Log "Updating winget sources..."
winget source update

# Get list of installed packages once at the start
Write-Log "Checking installed packages..."
$installedPackages = @{}

try {
    # Get winget list as PowerShell objects
    $packages = winget list --accept-source-agreements 2>$null
    if ($LASTEXITCODE -eq 0 -and $packages) {
        foreach ($package in $packages) {
            if ($package.Id) {
                $installedPackages[$package.Id] = $true
                Write-Log "Cached installed package: $($package.Id)" "DEBUG"
            } elseif ($package.PackageIdentifier) {
                $installedPackages[$package.PackageIdentifier] = $true
                Write-Log "Cached installed package: $($package.PackageIdentifier)" "DEBUG"
            }
        }
    }
} catch {
    Write-Log "Failed to get packages as objects, falling back to text parsing: $($_.Exception.Message)" "WARNING"
    
    # Fallback to text parsing
    $installedList = winget list --accept-source-agreements 2>$null | Out-String
    if ($LASTEXITCODE -eq 0 -and $installedList) {
        $lines = $installedList -split "`n"
        $headerPassed = $false
        
        foreach ($line in $lines) {
            if ($line -match '^Name\s+Id\s+Version') {
                $headerPassed = $true
                continue
            }
            if ($line -match '^-+\s+-+\s+-+') {
                continue
            }
            if (-not $headerPassed) {
                continue
            }
            
            if ($line -match '^\s*(.+?)\s+([A-Za-z0-9][\w\.-]*\.[A-Za-z0-9][\w\.-]*)\s+(.+)$') {
                $packageId = $matches[2].Trim()
                $installedPackages[$packageId] = $true
                Write-Log "Cached installed package: $packageId" "DEBUG"
            }
        }
    }
}

Write-Log "Found $($installedPackages.Count) installed packages"

# Debug: Show which packages we're looking for
Write-Log "Target packages:" "DEBUG"
foreach ($pkg in $wingetPackages) {
    $isInstalled = $installedPackages.ContainsKey($pkg)
    Write-Log "  $pkg`: $(if ($isInstalled) { 'INSTALLED' } else { 'NOT FOUND' })" "DEBUG"
}

$successCount = 0
$failedPackages = @()

foreach ($package in $wingetPackages) {
    if (Install-WingetPackage -PackageId $package -InstalledPackages $installedPackages) {
        $successCount++
    } else {
        $failedPackages += $package
    }
}

Write-Log "Installation completed. Success: $successCount/$($wingetPackages.Length)"

if ($failedPackages.Length -gt 0) {
    Write-Log "Failed packages:" "ERROR"
    foreach ($pkg in $failedPackages) {
        Write-Log "  - $pkg" "ERROR"
    }
}

{{ end }}
