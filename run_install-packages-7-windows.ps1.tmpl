{{ if eq .chezmoi.os "windows" -}}
# Install mise and packages on Windows
# Version management is done via config.toml, this script only ensures installation

$ErrorActionPreference = "Stop"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

# Check if mise is available (handle both command and function)
$miseAvailable = $false

# Check if mise is available as a command or function
if (Get-Command mise -ErrorAction SilentlyContinue) {
    try {
        # Just check if mise --version runs successfully (exit code 0)
        $null = mise --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            $commandType = (Get-Command mise).CommandType
            Write-Log "mise is available (type: $commandType)"
            $miseAvailable = $true
        }
    } catch {
        Write-Log "Failed to execute mise --version: $($_.Exception.Message)" "DEBUG"
        # Continue to manual search
    }
}

if (-not $miseAvailable) {
    Write-Log "mise not found. Please ensure winget packages are installed and mise is available." "ERROR"
    exit 1
}

# Install all packages defined in config.toml
Write-Log "Installing packages from config.toml..."
try {
    & mise install
    if ($LASTEXITCODE -eq 0) {
        Write-Log "Successfully installed all mise packages" "SUCCESS"
    } else {
        Write-Log "Some packages failed to install, but continuing..." "WARNING"
    }
} catch {
    Write-Log "Error during mise install: $($_.Exception.Message)" "WARNING"
}

Write-Log "mise package installation completed"

# Setup environment in current session for immediate use
Write-Log "Setting up environment in current session..."

# Add user local bin to PATH if not already present
$localBin = "$env:USERPROFILE\.local\bin"
if (Test-Path $localBin) {
    $currentPath = $env:PATH
    if ($currentPath -notlike "*$localBin*") {
        $env:PATH = "$localBin;$currentPath"
        Write-Log "Added $localBin to PATH"
    }
}

# Initialize mise environment
try {
    $miseEnv = & mise env --shell pwsh 2>$null
    if ($LASTEXITCODE -eq 0 -and $miseEnv) {
        # Convert array to string if necessary
        $envScript = if ($miseEnv -is [Array]) { $miseEnv -join "`n" } else { $miseEnv }
        Invoke-Expression $envScript
        Write-Log "Initialized mise environment for current session"
    }
} catch {
    Write-Log "Failed to initialize mise environment: $($_.Exception.Message)" "WARNING"
}

# Set up Go environment variables
if (Get-Command go -ErrorAction SilentlyContinue) {
    if (-not $env:GOPATH) {
        $env:GOPATH = "$env:USERPROFILE\go"
        Write-Log "Set GOPATH to $env:GOPATH"
    }
    $goBin = "$env:GOPATH\bin"
    if ((Test-Path $goBin) -and ($env:PATH -notlike "*$goBin*")) {
        $env:PATH = "$goBin;$env:PATH"
        Write-Log "Added $goBin to PATH"
    }
}

# Set up Rust environment
$cargoEnv = "$env:USERPROFILE\.cargo\env.ps1"
if (Test-Path $cargoEnv) {
    & $cargoEnv
    Write-Log "Loaded Rust/Cargo environment"
}

Write-Log "Environment setup completed - tools are now available in current session"
{{ end -}}