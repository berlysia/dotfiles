{{ if eq .chezmoi.os "windows" -}}
# Setup PowerShell environment immediately after chezmoi apply

$ErrorActionPreference = "Stop"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

Write-Log "Setting up PowerShell environment..."

# Function to setup environment in current session
function Set-Environment {
    # Add user local bin to PATH if not already present
    $localBin = "$env:USERPROFILE\.local\bin"
    if (Test-Path $localBin) {
        $currentPath = $env:PATH
        if ($currentPath -notlike "*$localBin*") {
            $env:PATH = "$localBin;$currentPath"
            Write-Log "Added $localBin to PATH"
        }
    }

    # Initialize mise environment if available
    if (Get-Command mise -ErrorAction SilentlyContinue) {
        try {
            $miseEnv = & mise env --shell powershell 2>$null
            if ($LASTEXITCODE -eq 0 -and $miseEnv) {
                Invoke-Expression $miseEnv
                Write-Log "Initialized mise environment"
            }
        } catch {
            Write-Log "Failed to initialize mise environment" "WARNING"
        }
    }

    # Set up Go environment variables
    if (Get-Command go -ErrorAction SilentlyContinue) {
        if (-not $env:GOPATH) {
            $env:GOPATH = "$env:USERPROFILE\go"
            Write-Log "Set GOPATH to $env:GOPATH"
        }
        $goBin = "$env:GOPATH\bin"
        if ((Test-Path $goBin) -and ($env:PATH -notlike "*$goBin*")) {
            $env:PATH = "$goBin;$env:PATH"
            Write-Log "Added $goBin to PATH"
        }
    }

    # Set up Rust environment
    $cargoEnv = "$env:USERPROFILE\.cargo\env.ps1"
    if (Test-Path $cargoEnv) {
        & $cargoEnv
        Write-Log "Loaded Rust/Cargo environment"
    }
}

# Apply environment setup to current session
Set-Environment

# Ensure PowerShell profiles are loaded by creating a flag file
$profileFlag = "$env:USERPROFILE\.local\share\powershell-env-setup"
if (!(Test-Path (Split-Path $profileFlag))) {
    New-Item -ItemType Directory -Path (Split-Path $profileFlag) -Force | Out-Null
}
Set-Content -Path $profileFlag -Value (Get-Date -Format "yyyy-MM-dd HH:mm:ss")

Write-Log "PowerShell environment setup completed"
Write-Log "Tools are now available in current session and future PowerShell sessions"

{{ end -}}